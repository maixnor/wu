a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
left_sum_vector = c(left_sum_vector, sum(f(seq(a, b - delta_x, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
right_sum_vector = c(right_sum_vector, sum(f(seq(a + delta_x, b, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
middle_sum_vector = c(middle_sum_vector, sum(f(seq(a + delta_x/2, b - delta_x/2, by = delta_x)))*delta_x)
}
print(left_sum_vector)
print(right_sum_vector)
print(middle_sum_vector)
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_vale,
main = "Difference between the left Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(right_sum_vector-exact_vale,
main = "Difference between the right Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(middle_sum_vector-exact_vale,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_vale,
main = "Left Riemann Sum",
ylab = "Value",
xlab = "Number of partitions",
type = "l")
#Simple approach
#Set the function
f <- function(x) {
return(30-3*x^2)
}
# Assign the exact value calculated using analysis to a variable
exact_vale <- 63
#Set the interval and the variables
interval <- c(0, 3)
ns <- seq(5, 1000, by = 1)
left_sum_vector <- c()
right_sum_vector <- c()
middle_sum_vector <- c()
#finished setting the variables, start creating a vector
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
left_sum_vector = c(left_sum_vector, sum(f(seq(a, b - delta_x, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
right_sum_vector = c(right_sum_vector, sum(f(seq(a + delta_x, b, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
middle_sum_vector = c(middle_sum_vector, sum(f(seq(a + delta_x/2, b - delta_x/2, by = delta_x)))*delta_x)
}
print(left_sum_vector)
print(left_sum_vector)
print(right_sum_vector)
print(right_sum_vector)
print(middle_sum_vector)
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_vale,
main = "Left Riemann Sum",
ylab = "Value",
xlab = "Number of partitions",
type = "l")
print(middle_sum_vector)
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_vale,
main = "Left Riemann Sum",
ylab = "Value",
xlab = "Number of partitions",
type = "l")
abline(a=exact_vale,b=0,col = "red")
abline(a=exact_vale,b=0,col = "red")
legend("topright", legend = c("Left Riemann Sum Values", "Value of the definete integral"), col = c("black", "red"), lty = c(1, 1), pch = c(NA, NA), bty = "n",cex = 0.8)
abline(a=exact_vale,b=0,col = "red")
legend("topright", legend = c("Left Riemann Sum Values", "Value of the definete integral"), col = c("black", "red"), lty = c(1, 1), pch = c(NA, NA), bty = "n",cex = 0.8)
#
plot(right_sum_vector-exact_vale,
main = "Right Riemann Sum",
ylab = "Value",
xlab = "Number of partitions",
type = "l")
abline(a=exact_vale,b=0,col = "red")
plot(middle_sum_vector-exact_value,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l",
log = "x")  # Setting the x-axis to logarithmic scale
#Set the function
f <- function(x) {
return(30-3*x^2)
}
# Assign the exact value calculated using analysis to a variable
exact_vale <- 63
#Set the interval and the variables
interval <- c(0, 3)
ns <- seq(5, 1000, by = 1)
left_sum_vector <- c()
right_sum_vector <- c()
middle_sum_vector <- c()
#finished setting the variables, start creating a vector
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
left_sum_vector = c(left_sum_vector, sum(f(seq(a, b - delta_x, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
right_sum_vector = c(right_sum_vector, sum(f(seq(a + delta_x, b, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
middle_sum_vector = c(middle_sum_vector, sum(f(seq(a + delta_x/2, b - delta_x/2, by = delta_x)))*delta_x)
}
print(left_sum_vector)
print(right_sum_vector)
print(middle_sum_vector)
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_vale,
main = "Difference between the left Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(right_sum_vector-exact_vale,
main = "Difference between the right Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(middle_sum_vector-exact_vale,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
plot(middle_sum_vector-exact_value,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l",
log = "x")  # Setting the x-axis to logarithmic scale
#
plot(middle_sum_vector-exact_vale,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#Set the function
f <- function(x) {
return(30-3*x^2)
}
# Assign the exact value calculated using analysis to a variable
exact_vale <- 63
#Set the interval and the variables
interval <- c(0, 3)
ns <- seq(5, 1000, by = 1)
left_sum_vector <- c()
right_sum_vector <- c()
middle_sum_vector <- c()
#finished setting the variables, start creating a vector
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
left_sum_vector = c(left_sum_vector, sum(f(seq(a, b - delta_x, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
right_sum_vector = c(right_sum_vector, sum(f(seq(a + delta_x, b, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
middle_sum_vector = c(middle_sum_vector, sum(f(seq(a + delta_x/2, b - delta_x/2, by = delta_x)))*delta_x)
}
print(left_sum_vector)
print(right_sum_vector)
print(middle_sum_vector)
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_vale,
main = "Difference between the left Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(right_sum_vector-exact_vale,
main = "Difference between the right Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(middle_sum_vector-exact_vale,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
plot(middle_sum_vector-exact_value,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l",
log = "x")  # Setting the x-axis to logarithmic scale
plot(middle_sum_vector-exact_value,
main = "Difference on log",
ylab = "Difference",
xlab = "Number of partitions",
type = "l",
log = "x")  # Setting the x-axis to logarithmic scale
#Set the function
f <- function(x) {
return(30-3*x^2)
}
# Assign the exact value calculated using analysis to a variable
exact_value <- 63
#Set the interval and the variables
interval <- c(0, 3)
ns <- seq(5, 1000, by = 1)
left_sum_vector <- c()
right_sum_vector <- c()
middle_sum_vector <- c()
#finished setting the variables, start creating a vector
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
left_sum_vector = c(left_sum_vector, sum(f(seq(a, b - delta_x, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
right_sum_vector = c(right_sum_vector, sum(f(seq(a + delta_x, b, by = delta_x)))*delta_x)
}
for (i in 1:996) {
a <- interval[1]
b <- interval[2]
n = ns[i]
delta_x = (b - a)/n
middle_sum_vector = c(middle_sum_vector, sum(f(seq(a + delta_x/2, b - delta_x/2, by = delta_x)))*delta_x)
}
print(left_sum_vector)
print(right_sum_vector)
print(middle_sum_vector)
# Comparing the three different types of Riemann sums with the value of integral
plot(left_sum_vector-exact_value,
main = "Difference between the left Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(right_sum_vector-exact_value,
main = "Difference between the right Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
#
plot(middle_sum_vector-exact_value,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l")
plot(middle_sum_vector-exact_value,
main = "Difference between the middle Riemann Sum value and definite integral value",
ylab = "Difference",
xlab = "Number of partitions",
type = "l",
log = "x")  # Setting the x-axis to logarithmic scale
Riemann <- function(f, interval, n) {
#variables
a <- interval[1]
b <- interval[2]
delta_x <- (b - a) / n
sum = 0
# Left Riemann Sum
for(i in 1:n) {
term = delta_x*f(a+(i-1)*delta_x)
sum = sum + term
}
left_sum <- sum
sum = 0
# Right Riemann Sum
for(i in 1:n) {
term = delta_x*f(a+i*delta_x)
sum = sum + term
}
right_sum <- sum
sum = 0
# Middle Riemann Sum
for(i in 1:n) {
term = delta_x*f(a+(i-(1/2))*delta_x)
sum = sum + term
}
middle_sum <- sum
sum = 0
return(c(left_sum, right_sum, middle_sum))
}
#Example
#Set the function
f <- function(x) {
return((1/sqrt(2*pi))*exp((-1*x^2)/2))
}
Riemann <- function(f, interval, n) {
#variables
a <- interval[1]
b <- interval[2]
delta_x <- (b - a) / n
sum = 0
# Left Riemann Sum
for(i in 1:n) {
term = delta_x*f(a+(i-1)*delta_x)
sum = sum + term
}
left_sum <- sum
sum = 0
# Right Riemann Sum
for(i in 1:n) {
term = delta_x*f(a+i*delta_x)
sum = sum + term
}
right_sum <- sum
sum = 0
# Middle Riemann Sum
for(i in 1:n) {
term = delta_x*f(a+(i-(1/2))*delta_x)
sum = sum + term
}
middle_sum <- sum
sum = 0
return(c(left_sum, right_sum, middle_sum))
}
#Example
#Set the function
f <- function(x) {
return((1/sqrt(2*pi))*exp((-1*x^2)/2))
}
# Set the interval [a, b]
interval <- c(-1.96, 1.96)
#Set n
n <- 100
a <- interval[1]
b <- interval[2]
delta_x <- (b - a) / n
# Calculate Riemann sums
result <- Riemann(f, interval, n)
# Print the results
cat("Left Riemann Sum:", result[1], "\n")
cat("Right Riemann Sum:", result[2], "\n")
cat("Middle Riemann Sum:", result[3], "\n")
#Now Part b with the r function
cat("Defined integral r function", pnorm(b)-pnorm(a),"\n")
cat("Left Riemann Sum according to our function with R function difference:", pnorm(b)-pnorm(a) - result[1], "\n")
cat("Right Riemann Sum according to our function with R function difference:", pnorm(b)-pnorm(a) - result[2], "\n")
cat("Middle Riemann Sum according to our function with R function difference:", pnorm(b)-pnorm(a) - result[3], "\n")
```{=tex}
knitr::opts_chunk$set(echo = TRUE)
middle_sum_vector = c(middle_sum_vector, sum(f(seq(a + delta_x/2, b - delta_x/2, by = delta_x)))*delta_x)
length_a <- length(vector_a)
vector_a <- c(719.05, 715.39, 716.79, 710.68, 721.15, 712.51, 719.3, 716.16, 710, 711.2, 717.14, 712.26, 720.02, 717.94, 711.23, 713.74, 720.36, 713.42, 718.78, 718.49, 717.68, 716.68, 713.33, 713.34, 717.77, 719.27, 715.58, 718.88, 714.88, 717.32, 716.96, 717.84, 717.49, 715.05, 712.61, 719.03, 715.72, 721.37, 714.65, 716.91, 718.49, 721.12, 718.86, 719.54)
sample_mean_a <- mean(vector_a)
sample_sd_a <- sd(vector_a)
length_a <- length(vector_a)
qnorm(1-0.2)
qnorm(1-0.1)
(CI <- c(a_lower, a_upper))
a_lower <- sample_mean_a-1.282*sample_sd_a/sqrt(length_a)
a_upper <- sample_mean_a+1.282*sample_sd_a/sqrt(length_a)
(CI <- c(a_lower, a_upper))
a_upper <- sample_mean_a+1.282*sample_sd_a/sqrt(sample_sd_a)
a_lower <- sample_mean_a-1.282*sample_sd_a/sqrt(sample_sd_a)
(CI <- c(a_lower, a_upper))
vector_a <- c(719.05, 715.39, 716.79, 710.68, 721.15, 712.51, 719.3, 716.16, 710, 711.2, 717.14, 712.26, 720.02, 717.94, 711.23, 713.74, 720.36, 713.42, 718.78, 718.49, 717.68, 716.68, 713.33, 713.34, 717.77, 719.27, 715.58, 718.88, 714.88, 717.32, 716.96, 717.84, 717.49, 715.05, 712.61, 719.03, 715.72, 721.37, 714.65, 716.91, 718.49, 721.12, 718.86, 719.54)
sample_mean_a <- mean(vector_a)
sample_sd_a <- sd(vector_a)
length_a <- length(vector_a)
qnorm(1-0.1) # shows significance level for 90%
a_lower <- sample_mean_a-1.282*sample_sd_a/sqrt(sample_sd_a)
a_upper <- sample_mean_a+1.282*sample_sd_a/sqrt(sample_sd_a)
(CI <- c(a_lower, a_upper))
sample2_sd_a <- sum(719.05, 715.39, 716.79, 710.68, 721.15, 712.51, 719.3, 716.16, 710, 711.2, 717.14, 712.26, 720.02, 717.94, 711.23, 713.74, 720.36, 713.42, 718.78, 718.49, 717.68, 716.68, 713.33, 713.34, 717.77, 719.27, 715.58, 718.88, 714.88, 717.32, 716.96, 717.84, 717.49, 715.05, 712.61, 719.03, 715.72, 721.37, 714.65, 716.91, 718.49, 721.12, 718.86, 719.54)/(1-length(vector_a))
length_a <- length(vector_a)
vector_a <- c(719.05, 715.39, 716.79, 710.68, 721.15, 712.51, 719.3, 716.16, 710, 711.2, 717.14, 712.26, 720.02, 717.94, 711.23, 713.74, 720.36, 713.42, 718.78, 718.49, 717.68, 716.68, 713.33, 713.34, 717.77, 719.27, 715.58, 718.88, 714.88, 717.32, 716.96, 717.84, 717.49, 715.05, 712.61, 719.03, 715.72, 721.37, 714.65, 716.91, 718.49, 721.12, 718.86, 719.54)
sample_mean_a <- mean(vector_a)
sample_sd_a <- sd(vector_a)
length_a <- length(vector_a)
vector_a <- c(719.05, 715.39, 716.79, 710.68, 721.15, 712.51, 719.3, 716.16, 710, 711.2, 717.14, 712.26, 720.02, 717.94, 711.23, 713.74, 720.36, 713.42, 718.78, 718.49, 717.68, 716.68, 713.33, 713.34, 717.77, 719.27, 715.58, 718.88, 714.88, 717.32, 716.96, 717.84, 717.49, 715.05, 712.61, 719.03, 715.72, 721.37, 714.65, 716.91, 718.49, 721.12, 718.86, 719.54)
sample_mean_a <- mean(vector_a)
sample_sd_a <- sd(vector_a)
length_a <- length(vector_a)
length_a
qnorm(1-0.1) # shows significance level for 90%
a_lower <- sample_mean_a-1.282*sample_sd_a/sqrt(sample_sd_a)
a_upper <- sample_mean_a+1.282*sample_sd_a/sqrt(sample_sd_a)
(CI <- c(a_lower, a_upper))
sample2_sd_a <- sqrt((vector_a-sample_mean_a)/length(a))
sample2_sd_a <- sqrt((vector_a-sample_mean_a)/length(vector_a))
sample2_sd_a <- sqrt((vector_a-sample_mean_a)^2/length(vector_a))
sample2_sd_a <- sum(sqrt((vector_a-sample_mean_a)^2/length(vector_a)))
sample2_sd_a <- sum(sqrt((vector_a-sample_mean_a)^2))/length(vector_a)
sample_mean_a <- mean(vector_a)
sample_sd_a <- sd(vector_a)
length_a <- length(vector_a)
sample2_sd_a <- sum(sqrt((vector_a-sample_mean_a)^2))/(length(vector_a)-1)
sample_mean_a <- mean(vector_a)
sample_sd_a <- sd(vector_a)
length_a <- length(vector_a)
(CI <- c(a_lower, a_upper))
sample2_sd_a <- sqrt(sum(((vector_a-sample_mean_a)^2))/(length(vector_a)-1))
a_lower <- sample_mean_a-1.282*sample_sd_a/sqrt(sample_sd_a)
a_upper <- sample_mean_a+1.282*sample_sd_a/sqrt(sample_sd_a)
(CI <- c(a_lower, a_upper))
a_lower <- sample_mean_a-1.282*sample_sd_a/(sample_sd_a)
a_upper <- sample_mean_a+1.282*sample_sd_a/(sample_sd_a)
(CI <- c(a_lower, a_upper))
length_b <- 79
sample_sd_b <- 3.905
qnom(0.995)
qnorm(0.995)
a_lower <- sample_mean_a-1.282*sample_sd_a/sqrt(length_a)
a_upper <- sample_mean_a+1.282*sample_sd_a/sqrt(length_a)
(CI <- c(a_lower, a_upper))
CI_99_b <- (x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b-2.576*sample_sd_b/sqrt(length_b)
CI_99_b <- c(x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b-2.576*sample_sd_b/sqrt(length_b)
CI_99_b
CI_99_b <- c(x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b+2.576*sample_sd_b/sqrt(length_b)
CI_99_b <- c(x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b+2.576*sample_sd_b/sqrt(length_b))
CI_99_b
CI_99_b <- c(x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b+2.576*sample_sd_b/sqrt(length_b))
length_b <- 79
x_bar_b <- 720.042
sample_sd_b <- 3.905
qnorm(0.995) #2.576
CI_99_b <- c(x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b+2.576*sample_sd_b/sqrt(length_b))
CI_99_b
qnorm(1-(1-0.85)/2)
a_lower <- sample_mean_a-1.44*sample_sd_a/sqrt(length_a)
a_upper <- sample_mean_a+1.44*sample_sd_a/sqrt(length_a)
(CI_85_a <- c(a_lower, a_upper))
qnorm(0.95) #2.576
CI_90_b <- c(x_bar_b-1.645*sample_sd_b/sqrt(length_b), x_bar_b+1.645*sample_sd_b/sqrt(length_b))
CI_90_b
qnorm(1-(1-0.95)/2) #1.44
a_lower <- sample_mean_a-1.960*sample_sd_a/sqrt(length_a)
a_upper <- sample_mean_a+1.960*sample_sd_a/sqrt(length_a)
(CI_95_a <- c(a_lower, a_upper))
CI_99_b <- c(x_bar_b-2.576*sample_sd_b/sqrt(length_b), x_bar_b+2.576*sample_sd_b/sqrt(length_b))
CI_99_b
install.packages("xts")
install.packages("lubridate")
install.packages("zoo")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=12)
knitr::opts_knit$set(root.dir = "D:/OneDrive - WU Wien/1296 - Business Analytics II/2_Homework - Quizzes/Homework 1/Provided Materials")
library(xts)
library(xts)
library(lubridate)
library(xts)
library(lubridate)
library(zoo)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=12)
knitr::opts_knit$set(root.dir = "D:/OneDrive - WU Wien/1296 - Business Analytics II/2_Homework - Quizzes/Homework 1/Provided Materials")
plot(xts_dats, multi.panel=3, main="Price time series", yaxis.same=TRUE)
plot(xts_dats, multi.panel=3, main="Price time series", yaxis.same=TRUE)
timevector <- as.Date(rownames(indices)) # dates
setwd("D:/OneDrive - WU Wien/1296 - Business Analytics II/wu/r/ba2/exam_n/Data")
setwd("D:/OneDrive - WU Wien/1296 - Business Analytics II/wu/r/ba2/exam_n/Data/BA2_Final_24_25_1296-2")
